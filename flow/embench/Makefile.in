
EMBENCH_DIR     = $(FRV_HOME)/external/embench-iot
EMBENCH_BUILD   = $(FRV_WORK)/embench
EMBENCH_LOG     = $(EMBENCH_BUILD)

EMBENCH_LD      = $(FRV_HOME)/flow/embench/link.ld
EMBENCH_BOOT    = $(FRV_HOME)/flow/embench/boot.S

EMBENCH_EXP_TEMPLATE = $(FRV_HOME)/flow/embench/expect_template.sh

EMBENCH_FLAGS   = -march=rv32imac -O3 -mabi=ilp32 -nostartfiles
EMBENCH_CFLAGS  = "$(EMBENCH_FLAGS) -c"
EMBENCH_LDFLAGS = "$(EMBENCH_FLAGS) -T$(EMBENCH_LD)"
EMBENCH_ULIBS   = "$(EMBENCH_BOOT) -lm"

EMBENCH_BMARKS  = aha-mont64        \
                  crc32             \
                  cubic             \
                  edn               \
                  huffbench         \
                  matmult-int       \
                  minver            \
                  nbody             \
                  nettle-aes        \
                  nettle-sha256     \
                  nsichneu          \
                  picojpeg          \
                  qrduino           \
                  sglib-combined    \
                  slre              \
                  st                \
                  statemate         \
                  ud                \
                  wikisort

EMBENCH_BUILD_TARGETS   =
EMBENCH_RUN_TARGETS     =

EMBENCH_TIMEOUT  = 30000000
EMBENCH_SCALE_FACTOR = 1

EMBENCH_OBJCOPY_FLAGS = --srec-forceS3

EMBENCH_PASS_ADDR= 0x80000088
EMBENCH_FAIL_ADDR= 0x80000080

EMBENCH_WAVES    =0
EMBENCH_GEN_TRACE=0

build-embench-binaries:
	rm -rf $(EMBENCH_BUILD)/
	mkdir -p $(EMBENCH_BUILD)
	sed -i 's/define.*LOCAL_SCALE_FACTOR.*/define LOCAL_SCALE_FACTOR $(EMBENCH_SCALE_FACTOR)/' \
        `find $(EMBENCH_DIR)/src -name *.c`
	cd $(EMBENCH_DIR) &&                \
    ./build_all.py                      \
	    --builddir $(EMBENCH_BUILD)     \
	    --logdir $(EMBENCH_BUILD)       \
        --arch  riscv32                 \
        --chip  generic                 \
        --board ri5cyverilator          \
	    --cc    $(CC)                   \
        --cflags $(EMBENCH_CFLAGS)      \
        --ldflags $(EMBENCH_LDFLAGS)    \
        --user-libs $(EMBENCH_ULIBS)

#
# 1. Benchmark name
define map_embench_dir
$(EMBENCH_BUILD)/src/${1}
endef

#
# 1. Benchmark name
define map_embench_exe
$(call map_embench_dir,${1})/${1}
endef

#
# 1. Benchmark name
define map_embench_objdump
$(call map_embench_exe,${1}).dis
endef

#
# 1. Benchmark name
define map_embench_srec
$(call map_embench_dir,${1})/ram.srec
endef

#
# 1. Benchmark name
define map_embench_gtkwl
$(call map_embench_dir,${1})/${1}.gtkwl
endef

#
# 1. Benchmark name
define map_embench_vcd
$(call map_embench_dir,${1})/${1}.vcd
endef

#
# 1. Benchmark name
define map_embench_expect_script
$(call map_embench_dir,${1})/expect.sh
endef

#
# 1. Benchmark name
define map_embench_grm_log
$(call map_embench_dir,${1})/grm.log
endef

#
# 1. Benchmark name
define map_embench_grm_trace
$(call map_embench_dir,${1})/grm_trace.log
endef

#
# 1. Benchmark name
define map_embench_dut_trace
$(call map_embench_dir,${1})/dut_trace.log
endef

#
# 1. Benchmark name
# 2. EMBENCH_WAVES
ifeq ($(EMBENCH_WAVES),1)
define map_embench_waves_or_not
+WAVES=$(call map_embench_vcd,${1})
endef
endif

#
# 1. Benchmark name
define map_embench_log
$(call map_embench_dir,${1})/${1}.log
endef

#
# 1. Benchmark name
define embench_add

$(call map_embench_objdump,${1}) : $(call map_embench_exe,${1})
	$(OBJDUMP) -D $${<} > $${@}
        
$(call map_embench_gtkwl,${1}) : $(call map_embench_objdump,${1})
	grep "80.*:" $${<} \
	    | grep -v ">:" | cut -c 11- | sed 's/\t//' \
	    | sort | uniq | sed 's/ +/ /' | sed 's/\t/ /' \
	    | sed 's/\(^....    \)    /0000\1/' \
	    > $${@} 

$(call map_embench_srec,${1}) : $(call map_embench_exe,${1})
	$(OBJCOPY) $(EMBENCH_OBJCOPY_FLAGS) -O srec $${<} $${@}

run-embench-${1}: $(EXE_CORE) $(call map_embench_srec,${1}) $(CCX_UNIT_ROM_HEX) $(call map_embench_objdump,${1})
	cd $(call map_embench_dir,${1}) && \
    $(EXE_CORE) \
        +IMEM=$(call map_embench_srec,${1}) \
        +PASS_ADDR=$(EMBENCH_PASS_ADDR) \
        +FAIL_ADDR=$(EMBENCH_FAIL_ADDR) \
        +IMEM_MAX_STALL=0 \
        +DMEM_MAX_STALL=0 \
        +TIMEOUT=$(EMBENCH_TIMEOUT) $(call map_embench_waves_or_not,${1}) \
        +TRACE=$(call map_embench_dut_trace,${1})

$(call map_embench_expect_script,${1}) : $(EMBENCH_EXP_TEMPLATE)
	cp $${<} $${@}
	sed -i 's:<SPIKE>:$(RISCV)/bin/spike:'  $${@}
	sed -i 's:<ELF>:$(call map_embench_exe,${1}):'  $${@}
	sed -i 's:<TIMEOUT>:$(EMBENCH_TIMEOUT):'  $${@}

$(call map_embench_grm_log,${1}) : $(call map_embench_expect_script,${1}) \
                                      $(call map_embench_exe,${1})
	expect $(call map_embench_expect_script,${1}) > $${@}

$(call map_embench_grm_trace,${1}) : $(call map_embench_grm_log,${1})
	grep "core   0: 0xff" $${<} \
        | sed 's/core.* 0xffffffff8/0x8/' \
        | sed 's/(//' \
        | sed 's/).*//' \
        > $${@}

EMBENCH_BUILD_TARGETS += $(call map_embench_objdump,${1})
EMBENCH_BUILD_TARGETS += $(call map_embench_gtkwl,${1})
EMBENCH_BUILD_TARGETS += $(call map_embench_srec,${1})
ifeq ($(EMBENCH_GEN_TRACE),1)
EMBENCH_BUILD_TARGETS += $(call map_embench_expect_script,${1})
EMBENCH_BUILD_TARGETS += $(call map_embench_grm_log,${1})
EMBENCH_BUILD_TARGETS += $(call map_embench_grm_trace,${1})
endif
EMBENCH_RUN_TARGETS   += run-embench-${1}

endef

$(foreach BM,$(EMBENCH_BMARKS),$(eval $(call embench_add,${BM})))

build-embench-targets: build-embench-binaries $(EMBENCH_BUILD_TARGETS)

run-embench-targets  : $(EMBENCH_RUN_TARGETS)

